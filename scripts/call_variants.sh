#! /bin/bash
set -e 
set -o pipefail

#Use nanopolish to index reads based on raw signal data,
#then use minimap2 to align reads to a pre-specified reference,
#and finally call variants based on this alignment

# get sample name and directories from command line
NAME=$1 # sample name
DIR=$2 # path to project directory
READS=$3 # path to raw .fast5 files
READ_SUMMARY=$4 # path to sequencing summary file generated by guppy

echo "output file for $NAME"

#### VALUES TO CHANGE PRIOR TO RUN ####

REF="/home/minion/sars-cov2-1/artic-ncov2019/primer_schemes/nCoV-2019/V1/nCoV-2019.reference.fasta" # path to reference genome
MAKERANGE="/home/minion/sars-cov2-1/Scripts/nanopolish_makerange.py" # path to nanopolish makerange script
NUM_CORES=8 # number of cores available

SNP_SUPPORT=0.75
REQ_DEPTH=20

date
echo "running nanopolish index"

#index reads individually for each sample
if [ ! -f $DIR/demux/$NAME.fastq.gz.index ]; then
	nanopolish index -d $READS -s $READ_SUMMARY $DIR/demux/$NAME.fastq.gz
fi

date
echo "running minimap2"

if [ ! -f $DIR/nanopolish/$NAME.aln.ref.nanopolish.sorted.bam ]; then
	minimap2 -ax map-ont -t $NUM_CORES $REF $DIR/demux/$NAME.fastq.gz | \
		samtools sort -@ $NUM_CORES -o $DIR/nanopolish/$NAME.aln.ref.nanopolish.sorted.bam \
		-T $DIR/nanopolish/tmp/$NAME.reads.tmp
	samtools index $DIR/nanopolish/$NAME.aln.ref.nanopolish.sorted.bam
fi

date
echo "calling variants with nanopolish"

# use makerange function bundled with nanopolish to break up into window sizes
# this is to prevent loading all fast5 data into memory each time

# run makerange and save output to file
if [ ! -f $DIR/nanopolish/ref_ranges.txt ]; then
	python3 $MAKERANGE $REF > $DIR/nanopolish/ref_ranges.txt
fi

# loop through window sizes and run nanopolish on each
count=1

while read line; do
	if [ ! -f $DIR/nanopolish/$NAME.win$count.nanopolish.vcf ]; then
	
		#name output file using counter
		outfile="$DIR/nanopolish/$NAME.win$count.nanopolish.vcf"
		
		#run nanopolish here
		nanopolish variants -o $outfile \
			-p 1 \
			-w $line \
			-q dam \
			-r $DIR/demux/$NAME.fastq.gz \
			-b $DIR/nanopolish/$NAME.aln.ref.nanopolish.sorted.bam \
			-g $REF \
			-t $NUM_CORES
	fi

	echo "nanopolish for window $count complete"
	
	#increase counter used for naming files
	count=$(($count + 1))

done < $DIR/nanopolish/ref_ranges.txt

echo "nanopolish completed successfully for all windows"

#merge vcfs created by window size

#create file containing list of vcf files to merge
#also update the vcf header to contain info about the reference
#bcftools concat will not work otherwise

# if the correct headertext file doesn't exist, create it
if [ ! -f $DIR/nanopolish/headertext.txt ]; then
	echo "##contig=<ID=MN908947.3,length=29903>" > $DIR/nanopolish/headertext.txt
fi


idx=1
touch $DIR/nanopolish/$NAME.vcf.files.txt

while [ $idx -lt $count ]; do

	if [ ! -f $DIR/nanopolish/$NAME.win$idx.annotate.nanopolish.vcf ]; then

		#update vcf header
		bcftools annotate -h $DIR/nanopolish/headertext.txt -o $DIR/nanopolish/$NAME.win$idx.annotate.nanopolish.vcf \
			--no-version $DIR/nanopolish/$NAME.win$idx.nanopolish.vcf

		#get outfile name and append to file
		echo "$DIR/nanopolish/$NAME.win$idx.annotate.nanopolish.vcf" >> $DIR/nanopolish/$NAME.vcf.files.txt
	fi

	#increase counter
	idx=$(($idx + 1))
done

if [ ! -f $DIR/nanopolish/$NAME.nanopolish.vcf ]; then
	#concatenate the vcf files for this sample
	bcftools concat --no-version -o $DIR/nanopolish/$NAME.nanopolish.vcf -f $DIR/nanopolish/$NAME.vcf.files.txt
fi

if [ ! -f $DIR/nanopolish/$NAME.nanopolish.filt.vcf ]; then
	#filter vcf on hard-coded support and read depth
	bcftools filter --no-version -i "INFO/SupportFraction>$SNP_SUPPORT" $DIR/nanopolish/$NAME.nanopolish.vcf | \
		bcftools filter --no-version -i "INFO/TotalReads>$REQ_DEPTH" -o $DIR/nanopolish/$NAME.nanopolish.filt.vcf
fi

if [ ! -f $DIR/nanopolish/$NAME.nanopolish.filt.rename.vcf.gz ]; then
	#compress and index files for optional additional vcf manipulation
	bcftools view --no-version -O z -o $DIR/nanopolish/$NAME.nanopolish.filt.vcf.gz $DIR/nanopolish/$NAME.nanopolish.filt.vcf
	echo "sample $NAME" > $DIR/nanopolish/reheader-vcf.txt
	bcftools reheader -s $DIR/nanopolish/reheader-vcf.txt -o $DIR/nanopolish/$NAME.nanopolish.filt.rename.vcf.gz \
		$DIR/nanopolish/$NAME.nanopolish.filt.vcf.gz
	bcftools index --threads $NUM_CORES $DIR/nanopolish/$NAME.nanopolish.filt.rename.vcf.gz
fi

echo "nanopolish script completed successfully"
